AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  WAMBDA Sample Project

  A sample Todo application built with WAMBDA framework


Parameters:
  DEBUG:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Set to true to enable debug mode for the Lambda function.'
  UseMock:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Set to true to use mock data instead of real data in the Lambda function.'
  NoAuth:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Set to true to allow unconditional login without authentication.'
  LogLevel:
    Type: String
    Default: 'INFO'
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARNING'
      - 'ERROR'
    Description: 'Set the logging level for the Lambda function.'
  DenySignup:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Set to true to deny signup during maintenance.'
  DenyLogin:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Set to true to deny login during maintenance.'
  DynamoDBTable:
    Type: String
    Default: 'wambda-table-ssr001'
    Description: 'DynamoDB table name for the application.'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tracing: Active
    MemorySize: 512
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
  Api:
    TracingEnabled: true
Resources:
  # CloudWatch Log Group for API Gateway Access Logs
  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/wambda-ssr001-${AWS::StackName}-access-logs'
      RetentionInDays: 7

  # IAM Role for API Gateway to push logs to CloudWatch
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Lambda function to set API Gateway account-level CloudWatch role
  ApiGatewayAccountConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'wambda-ssr001-${AWS::StackName}-apigateway-account-config'
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt ApiGatewayAccountConfigRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def handler(event, context):
              try:
                  apigateway = boto3.client('apigateway')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Set the CloudWatch role ARN for API Gateway account
                      role_arn = event['ResourceProperties']['RoleArn']
                      apigateway.update_account(
                          patchOperations=[
                              {
                                  'op': 'replace',
                                  'path': '/cloudwatchRoleArn',
                                  'value': role_arn
                              }
                          ]
                      )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM Role for the Lambda function
  ApiGatewayAccountConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ApiGatewayAccountAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:PATCH
                  - apigateway:GET
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/account'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt ApiGatewayLoggingRole.Arn

  # Custom resource to configure API Gateway account
  ApiGatewayAccountConfig:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayAccountConfigFunction.Arn
      RoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  MainAPIGateway:
    Type: AWS::Serverless::Api
    DependsOn: ApiGatewayAccountConfig
    Properties:
      Name: 'api-wambda-ssr001-main'
      StageName: 'stage-01'
      EndpointConfiguration: REGIONAL
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: '{ "requestId": "$context.requestId", "extendedRequestId": "$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller": "$context.identity.caller", "user": "$context.identity.user", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod", "resourcePath": "$context.resourcePath", "status": "$context.status", "protocol": "$context.protocol", "responseLength": "$context.responseLength", "responseTime": "$context.responseTime", "error": "$context.error.message", "integrationError": "$context.integrationErrorMessage" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true
  MainFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'lambda-wambda-ssr001-main'
      CodeUri: Lambda/
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: !Ref LogLevel
      Events:
        ApiRoot:
          Type: Api
          Properties:
            Path: '/'
            Method: ANY
            RestApiId: !Ref MainAPIGateway
        ApiProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: ANY
            RestApiId: !Ref MainAPIGateway
      Environment:
        Variables:
          WAMBDA_DEBUG: !Ref DEBUG
          WAMBDA_USE_MOCK: !Ref UseMock
          WAMBDA_NO_AUTH: !Ref NoAuth
          WAMBDA_DENY_SIGNUP: !Ref DenySignup
          WAMBDA_DENY_LOGIN: !Ref DenyLogin
          WAMBDA_LOG_LEVEL: !Ref LogLevel
          DYNAMODB_TABLE: !Ref DynamoDBTable
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'role-wambda-ssr001-lambda-exec'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
      Policies:
        - PolicyName: "policy-wambda-ssr001-lambda-exec"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                Resource: "*"
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WAMBDASampleApi:
    Description: API Gateway endpoint URL for stage-01 for WAMBDA Sample Project function
    Value: !Sub "https://${MainAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/stage-01/"
